# SpringMVC

## 概述

- SpringMVC是spring的一个模块，专门是做web开发的，理解为servlet的升级
  - **web开发底层都是servlet**，框架是在servlet基础上面加入一些功能，让开发更方便
- 将SpringMVC创建的控制器对象，放入Spring容器中管理

## MVC

## SpringMVC的开发步骤

- 核心开发结构

​	**中央调度器进行请求转发，创建SpringMVC容器对象（真正处理请求的Controller）**

![image-20221217160559689](https://gitee.com/shiopex/typora/raw/master/202212171606853.png)

### 1.index.jsp

- **展示请求超链接页面，传入请求参数**

- ```
  <%@ page contentType="text/html;charset=UTF-8" language="java" %>
  <html>
  <head>
      <title>Title</title>
  </head>
  <body>
           <p>第一个SpringMVC项目</p>
  
           <!--Get请求-->
           <p><a href="some.do">发起some.do请求</a> </p>
            <br/>
  
           <!--Post请求-->
            <form action="other.do" method="post">
                <input type="submit" value="post请求other.do">
            </form>
  </body>
  </html>
  ```

### 2.web.xml
- **核心配置文件，创建DispatcherServlet对象，中央调度器DispatcherServlet进行请求的转发（对*.do这样的URL进行请求转发处理），同时创建springmvc容器对象，读取springmvc_config.xml的配置文件，把springmvc容器中的请求处理对象都创建出来**

- ```
  <?xml version="1.0" encoding="UTF-8"?>
  <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
           version="4.0">
  
      <servlet>
          <servlet-name>springmvc</servlet-name>
          <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
          
          <!--自定义读取SpringMVC配置文件位置-->
          <init-param>
              <param-name>contextConfigLocation</param-name>
              <param-value>classpath:springmvc_config.xml</param-value>
          </init-param>
  
          <load-on-startup>1</load-on-startup>
      </servlet>
      
      <servlet-mapping>
          <servlet-name>springmvc</servlet-name>
          <url-pattern>*.do</url-pattern>
      </servlet-mapping>
  
  </web-app>
  ```

### 3.springmvc_config.xml

- **声明组件扫描器和视图解析器，对返回显示文件JSP文件和请求处理类进行注解声明**

  - ```
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:context="http://www.springframework.org/schema/context"
           xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
    
        <!--声明组件扫描器-->
        <context:component-scan base-package="org.example.controller"/>
    
        <!--声明视图解析器，帮助开发人员设置多个视图文件的路径-->
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
            <!--前缀：视图文件位置-->
            <property name="prefix" value="/WEB-INF/view/"/>
            <!--后缀：视图文件的扩展名-->
            <property name="suffix" value=".jsp"/>
        </bean>
    </beans>
    ```

###  4.Mycontroller控制器(处理器)类

- **进行请求处理的真正的类，功能类似于Sevlet类，但实际上不是**

- ```
  package org.example.controller;
  
  import org.springframework.stereotype.Controller;
  import org.springframework.web.bind.annotation.RequestMapping;
  import org.springframework.web.bind.annotation.RequestMethod;
  import org.springframework.web.servlet.ModelAndView;
  
  @Controller
  public class Mycontroller {
  
      //用dosome方法来处理some.do的请求，所以这个方法又被称为控制器方法
      //value传入String类型，请求URL地址
      @RequestMapping(value = "/some.do",method = RequestMethod.GET)
      public ModelAndView dosome(){
         ModelAndView mv = new ModelAndView();
  
         mv.addObject("msg","欢迎");
         mv.addObject("fun","执行的是dosome方法");
  
         mv.setViewName("show");
  
         return mv;
      }
  
  
      //在springmvc.xml配置视图解析器后，修改 setViewName()
      @RequestMapping(value = {"/other.do"},method = RequestMethod.POST)
      public ModelAndView doOther(){
          ModelAndView mv = new ModelAndView();
          mv.addObject("msg","欢迎使用springmvc做web开发");
          mv.addObject("fun","执行的是doOther方法");
  
          //当配置了视图解析器后，可以使用逻辑名称（文件名）指定视图，框架会使用视图解析器的”前缀+逻辑名称 +后缀“组成完整路径
          mv.setViewName("other");
  
          return mv;
      }
  }
  ```

### 5.show.jsp和other.jsp

- **处理结果返回JSP显示**

- ```
  <%@ page contentType="text/html;charset=UTF-8" language="java" %>
  <html>
  <head>
      <title>Title</title>
  </head>
  <body>
       <h3>show.jsp从request作用域获取数据</h3><br/>
       <h3>msg数据：${msg}</h3><br/>
       <h3>fun数据：${fun}</h3>
  </body>
  </html>
  
  
  
  <%@ page contentType="text/html;charset=UTF-8" language="java" %>
  <html>
  <head>
      <title>Title</title>
  </head>
  <body>
  <h3>other.jsp从request作用域获取数据</h3><br/>
  <h3>msg数据:${msg}</h3>
  <h3>fun数据:${fun}</h3>
  </body>
  </html>
  ```

## RequestMapping处理器方法中的参数

- 处理器方法可以包含以下四类参数
  - HttpServletRequest
  - HttpServletResponse	
  - HttpSession				     
  - 请求中所携带的请求参数

### 逐个接收参数

- 接收用户提交的参数：**处理器方法的形参名和请求(index.jsp)中的参数必须一致**

  - 如果业务中名称就是不一样，需要**@RequestParam 注解**

  - ```
    //index.jsp的参数名是iname和iage,
     
    <p>请求参数名和处理器方法的形参名不一样</p>
    <form action="other.do" method="post">
        姓名：<input type="text" name="iname"><br/>
        年龄：<input type="text" name="iage"><br/>
        <input type="submit" value="提交参数">
    </form>
    
    
    // @RequestParam：定义在处理器方法的形参前面
    //属性：1. value，请求参数名，可省略
    //     2. required，是一个Boolean类型，默认为true，表示必须包含参数
    @RequestMapping(value = "/other.do")
    public ModelAndView doOther(@RequestParam("iname" ) String name,
                                @RequestParam("iage") Integer age){
        System.out.println("doOther方法的，name="+name+", age="+age);
    
        ModelAndView mv = new ModelAndView();
        mv.addObject("myname",name);
        mv.addObject("myage",age);
        mv.setViewName("show");
        return mv;
    }
    ```

  - 

- 注意：在提交请求参数的时候，get请求方式中文没有乱码；post请求方式中文有乱码，需要使用过滤器处理乱码问题

index.jsp

```
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Title</title>
</head>
<body>
<p>提交参数给Controller</p>

<form action="some.do" method="post">
    姓名：<input type="text" name="name"><br/>
    年龄：<input type="text" name="age"><br/>
    <input type="submit" value="提交参数">
</form>

<%--    <p><a href="user/other.do">发起other.do请求</a></p>--%>
</body>
</html>

```
在web.xml配置过滤器
```
<!--注册声明过滤器，解决post请求乱码的问题-->
<filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

    <!--设置项目中使用的字符编码-->
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>

    <!--强制请求对象（HttpServletRequest）使用encoding编码的值-->
    <init-param>
        <param-name>forceRequestEncoding</param-name>
        <param-value>true</param-value>
    </init-param>

    <!--强制应答对象（HttpServletResponse）-->
    <init-param>
        <param-name>forceResponseEncoding</param-name>
        <param-value>true</param-value>
    </init-param>
</filter>

<filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <!--
    /*  : 表示强制所有的请求先通过过滤器处理
    -->
    <url-pattern>/rl-pattern>
</filter-mapping>
```

Mycontroller处理器类

```
@Controller
public class MyController {
    /*
    
    * 框架接收请求参数：
    * 1 使用request对象接收请求参数
    *   String strName = request.getParameter("name");
    *   String strAge = request.getParameter("age");
    * 2 springmvc框架通过dispatcherServlet 调用MyController的doSome方法
    *   调用方法时，按名称对应，把接收的参数赋值给形参 doSome(strName,Integer.valueOf(strAge))
    *   框架会提供类型转换的功能，把String转换为 int ，long ，float ，double等
    *
    * */
    @RequestMapping(value = "/some.do")
    public ModelAndView doSome(String name,Integer age){
        System.out.println("dosome方法的，name= " + name +", age="+ age);

        ModelAndView mv = new ModelAndView();
        mv.addObject("myname",name);
        mv.addObject("myage",age);
        mv.setViewName("show");
        return mv;
    }
}
```

### 